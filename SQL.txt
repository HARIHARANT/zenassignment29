List all the Canadian cities and their populations
SELECT city, population FROM north_american_cities WHERE country = "Canada";

Order all the cities in the United States by their latitude from north to south
SELECT city FROM north_american_cities WHERE country = "United States" ORDER BY latitude DESC;

List all the cities west of Chicago, ordered from west to east
SELECT city FROM north_american_cities WHERE longitude < -87.629798 ORDER BY longitude;

List the two largest cities in Mexico (by population)
SELECT city FROM north_american_cities WHERE country = "Mexico" ORDER BY population DESC LIMIT 2;

List the third and fourth largest cities (by population) in the United States and their population
SELECT city FROM north_american_cities WHERE country = "United States" ORDER BY population DESC LIMIT 2 OFFSET 2;

Find the domestic and international sales for each movie 
SELECT title,domestic_sales,international_sales FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id;

Show the sales numbers for each movie that did better internationally rather than domestically
SELECT title, domestic_sales, international_sales FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id WHERE international_sales > domestic_sales;

List all the movies by their ratings in descending order
SELECT title, rating FROM movies INNER JOIN boxoffice ON movies.id = boxoffice.movie_id ORDER BY rating DESC;

Find the list of all buildings that have employees 
SELECT DISTINCT building FROM employees;

Find the list of all buildings and their capacity
SELECT building_name,capacity FROM buildings;

List all buildings and the distinct employee roles in each building (including empty buildings)
SELECT DISTINCT building_name, role FROM buildings LEFT JOIN employees ON building_name = employees.building;

Find the name and role of all employees who have not been assigned to a building 
SELECT name,role FROM employees WHERE building IS NULL

Find the names of the buildings that hold no employees 
SELECT DISTINCT building_name FROM buildings LEFT JOIN employees ON building_name = employees.building WHERE employees.building IS NULL;

Exercise 9:
SELECT title,SUM(boxoffice.domestic_sales+boxoffice.international_sales)/1000000 AS Sales  FROM movies LEFT JOIN boxoffice ON  movies.id = boxoffice.movie_id GROUP BY id;
SELECT title,rating*10 AS Ratings  FROM movies LEFT JOIN boxoffice ON  movies.id = boxoffice.movie_id;
SELECT title FROM movies LEFT JOIN boxoffice ON  movies.id = boxoffice.movie_id WHERE year%2 = 0;

Exercise 10:
SELECT name,MAX(years_employed) AS Longest_Time FROM employees;
SELECT role,name,AVG(years_employed) AS Average_YearsOfEmployed FROM employees GROUP BY role;
SELECT building,SUM(years_employed) AS Total_numberof_employee_years FROM employees GROUP BY building;

Exercise 11:
SELECT count(role) FROM employees WHERE role='Artist';
SELECT role, count(name) FROM employees GROUP BY role;
SELECT SUM(years_employed) FROM employees WHERE role='Engineer';

Exercise 12:
SELECT director, count(DISTINCT director) FROM movies GROUP BY director;
SELECT director, SUM(domestic_sales+international_sales) AS Total FROM movies  LEFT JOIN boxoffice ON id=movie_id GROUP BY director;

Exercise 13:
INSERT INTO movies (title,director,year,length_minutes) VALUES('Toy Story 4','Pete Docter','2001',122);
INSERT INTO boxoffice (movie_id,rating,domestic_sales,international_sales) VALUES('15','8.7',340*1000000,270*1000000);

Exercise 14:
UPDATE movies SET director = 'John Lasseter' WHERE id = 2;
UPDATE movies SET year = 1999 WHERE id = 3;
UPDATE movies SET title = 'Toy Story 3',director = 'Lee Unkrich' WHERE title = 'Toy Story 8';

Exercise 15:
DELETE FROM movies WHERE year < 2005;
DELETE FROM movies WHERE director = 'Andrew Stanton';

Exercise 16:
CREATE TABLE Database(
 Name TEXT,
 Version FLOAT,
 Download_count INTEGER
);

Exercise 17:
ALTER TABLE movies ADD Aspect_ratio FLOAT;
ALTER TABLE movies ADD Language TEXT DEFAULT English;

Exercise 18:
DROP TABLE movies;
DROP TABLE boxoffice;
